// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PACIENT
  DOCTOR
}

model User {
  id              String            @id @unique @default(uuid())
  name            String
  email           String            @unique
  password        String
  role            Role              @default(PACIENT)
  gender          String
  cpf             String            @unique
  phone           String
  emailActive     Boolean           @default(false)
  createdAt       DateTime          @default(now())
  Token           Token[]
  Clinic          Clinic?           @relation(fields: [idClinic], references: [id])
  idClinic        String?
  ServiceExecuted ServiceExecuted[]

  @@map("users")
}

model Token {
  id         String   @id @unique @default(uuid())
  token      String   @unique
  expireDate DateTime
  createdAt  DateTime @default(now())

  user   User   @relation(fields: [idUser], references: [id], onDelete: Cascade, onUpdate: NoAction)
  idUser String

  @@map("tokens")
}

model Address {
  id       String  @id @unique @default(uuid())
  clinic   Clinic? @relation(fields: [idClinic], references: [id], onDelete: Cascade)
  idClinic String? @unique

  street       String
  num          Decimal
  neighborhood String
  city         String
  state        String
  zip          String
  complement   String
  reference    String

  @@map("addresses")
}

model Clinic {
  id   String @id @unique @default(uuid())
  name String @unique

  users           User[]
  Address         Address?
  ServiceExecuted ServiceExecuted[]

  @@map("clinics")
}

enum Category {
  QUERY
  EXAM
  SURGERY
}

model Service {
  id              String            @id @unique @default(uuid())
  name            String            @unique
  price           Decimal
  category        Category
  ServiceExecuted ServiceExecuted[]

  @@map("services")
}

model ServiceExecuted {
  id          String   @id @unique @default(uuid())
  user        User     @relation(fields: [idUser], references: [id])
  idUser      String
  service     Service  @relation(fields: [idService], references: [id])
  idService   String
  clinic      Clinic   @relation(fields: [idClinic], references: [id])
  idClinic    String
  price       Decimal
  dataPayment DateTime
  date        DateTime
  approved    Boolean  @default(false)
  exams       Exam[]

  @@map("services_executed")
}

model Exam {
  id                String          @id @unique @default(uuid())
  serviceExecuted   ServiceExecuted @relation(fields: [idServiceExecuted], references: [id])
  idServiceExecuted String
  urlExam           String

  @@map("exams")
}
