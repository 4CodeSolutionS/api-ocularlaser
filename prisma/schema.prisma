// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PACIENT
  DOCTOR
  SUPER
}

model Key {
  id        String   @id @unique @default(uuid())
  idUser    String?  @unique
  active    Boolean  @default(false)
  key       String   @unique
  createdAt DateTime @default(now())

  @@map("keys")
}

model User {
  id                String            @id @unique @default(uuid())
  idCostumerAsaas   String?           @unique
  name              String
  email             String            @unique
  password          String
  role              Role              @default(PACIENT)
  gender            String
  cpf               String            @unique
  phone             String
  emailActive       Boolean           @default(false)
  createdAt         DateTime          @default(now())
  tokens            Token[]
  clinic            Clinic?           @relation(fields: [idClinic], references: [id])
  idClinic          String?
  servicesExecuteds ServiceExecuted[]
  payments          Payment[]
  cards             Card[]

  @@map("users")
}

model Token {
  id         String   @id @unique @default(uuid())
  token      String   @unique
  expireDate DateTime
  createdAt  DateTime @default(now())

  user   User   @relation(fields: [idUser], references: [id], onDelete: Cascade, onUpdate: NoAction)
  idUser String

  @@map("tokens")
}

model Address {
  id       String  @id @unique @default(uuid())
  clinic   Clinic? @relation(fields: [idClinic], references: [id], onDelete: Cascade)
  idClinic String? @unique

  street       String
  num          Decimal
  neighborhood String
  city         String
  state        String
  zip          String
  complement   String
  reference    String

  @@map("addresses")
}

model Clinic {
  id   String @id @unique @default(uuid())
  name String @unique

  users             User[]
  address           Address?
  servicesExecuteds ServiceExecuted[]
  discountCoupons   DiscountCoupon[]

  @@map("clinics")
}

enum Category {
  QUERY
  EXAM
  SURGERY
}

model Service {
  id                String            @id @unique @default(uuid())
  name              String            @unique
  price             Decimal
  category          Category
  servicesExecuteds ServiceExecuted[]

  @@map("services")
}

model ServiceExecuted {
  id        String   @id @unique @default(uuid())
  user      User     @relation(fields: [idUser], references: [id])
  idUser    String
  service   Service  @relation(fields: [idService], references: [id])
  idService String
  clinic    Clinic   @relation(fields: [idClinic], references: [id])
  idClinic  String
  price     Decimal
  approved  Boolean  @default(false)
  exams     Exam[]
  payment   Payment?

  @@map("services_executed")
}

model Exam {
  id                String          @id @unique @default(uuid())
  serviceExecuted   ServiceExecuted @relation(fields: [idServiceExecuted], references: [id])
  idServiceExecuted String
  urlExam           String

  @@map("exams")
}

enum PaymentMethod {
  CREDIT_CARD
  FETLOCK
  PIX
}

enum Status {
  APPROVED
  REPROVED
}

model Payment {
  id                String          @id @unique @default(uuid())
  users             User            @relation(fields: [idUser], references: [id])
  idPaymentAsaas    String
  idUser            String
  idServiceExecuted String          @unique
  invoiceUrl        String
  installmentCount  Decimal?
  installmentValue  Decimal?
  serviceExecuted   ServiceExecuted @relation(fields: [idServiceExecuted], references: [id])
  paymentMethod     PaymentMethod
  paymentStatus     Status
  value             Decimal
  netValue          Decimal

  datePayment DateTime?

  @@map("payments")
}

model Card {
  id             String  @id @unique @default(uuid())
  users          User    @relation(fields: [idUser], references: [id], onDelete: Cascade, onUpdate: NoAction)
  idUser         String  @unique
  tokenCardAsaas String? @unique
  brand          String
  name           String
  num            String
  expireDate     String
  ccv            String

  @@map("cards")
}

model DiscountCoupon {
  id         String   @id @unique @default(uuid())
  clinic     Clinic   @relation(fields: [idClinic], references: [id])
  idClinic   String
  name       String
  code       String   @unique
  discount   Decimal
  startDate  DateTime
  expireDate DateTime
  active     Boolean

  @@map("discount_coupons")
}
